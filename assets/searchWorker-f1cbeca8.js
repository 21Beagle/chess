var X=Object.defineProperty;var Z=(w,u,I)=>u in w?X(w,u,{enumerable:!0,configurable:!0,writable:!0,value:I}):w[u]=I;var n=(w,u,I)=>(Z(w,typeof u!="symbol"?u+"":u,I),I);(function(){"use strict";class w{constructor(e,t,i){n(this,"name");n(this,"id");n(this,"value");this.name=e,this.id=t,this.value=i}}const u={PAWN:new w("Pawn","P",1),KNIGHT:new w("Knight","N",3),KING:new w("King","K",0),QUEEN:new w("Queen","Q",9),ROOK:new w("Rook","R",5),BISHOP:new w("Bishop","B",3),EMPTY:new w("Empty","",0),NULL:new w("Null","-",-1)};function I(o){return o===o.toUpperCase()}function K(o){return/^-?\d+$/.test(o)}let N;const W=new Uint8Array(16);function O(){if(!N&&(N=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!N))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return N(W)}const P=[];for(let o=0;o<256;++o)P.push((o+256).toString(16).slice(1));function F(o,e=0){return P[o[e+0]]+P[o[e+1]]+P[o[e+2]]+P[o[e+3]]+"-"+P[o[e+4]]+P[o[e+5]]+"-"+P[o[e+6]]+P[o[e+7]]+"-"+P[o[e+8]]+P[o[e+9]]+"-"+P[o[e+10]]+P[o[e+11]]+P[o[e+12]]+P[o[e+13]]+P[o[e+14]]+P[o[e+15]]}var G={randomUUID:typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function S(o,e,t){if(G.randomUUID&&!e&&!o)return G.randomUUID();o=o||{};const i=o.random||(o.rng||O)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let s=0;s<16;++s)e[t+s]=i[s];return e}return F(i)}class R{constructor(e,t,i,s,r){n(this,"castle");n(this,"enPassant");n(this,"colour");n(this,"halfMoveClock",0);n(this,"fullMoveClock",1);n(this,"id");n(this,"isCheckMate",!1);n(this,"isStaleMate",!1);this.castle=e,this.enPassant=t,this.colour=i,this.halfMoveClock=s,this.fullMoveClock=r,this.id=S()}copy(e=!1){if(this.enPassant===null){const i=new R(this.castle,null,this.colour.copy(),this.fullMoveClock,this.halfMoveClock);return e&&(i.id=this.id),i}const t=new R(this.castle,this.enPassant.copy(),this.colour.copy(),this.fullMoveClock,this.halfMoveClock);return e&&(t.id=this.id),t}}const v=class v{constructor(e){n(this,"id");n(this,"whiteId","W");n(this,"blackId","B");n(this,"blackName","Black");n(this,"whiteName","White");n(this,"nullId","");this.id=e}get isWhite(){return this.id===this.whiteId}get isBlack(){return this.id===this.blackId}get isNull(){return this.id===this.nullId}get name(){return this.isBlack?this.blackName:this.whiteName}changePlayer(){return this.id===this.nullId?v.Null:(this.id=this.isBlack?this.whiteId:this.blackId,this)}isEqual(e){return v.areSameColour(this,e)}get opposite(){return this.id===this.nullId?v.Null:this.isBlack?new v(this.whiteId):new v(this.blackId)}copy(){return new v(this.id)}static get Black(){return v._black}static get White(){return v._white}static get Null(){return v._null}static areSameColour(e,t){return e.id===t.id}static areDifferentColourAndNotNull(e,t){return e.isNull||t.isNull?!1:e.id!==t.id}};n(v,"_black",new v("B")),n(v,"_white",new v("W")),n(v,"_null",new v(""));let E=v;const c=class c{constructor(e){n(this,"_index",c._nullIndex);n(this,"_an",c._nullAn);n(this,"_rank",c._nullRank);n(this,"_file",c._nullFile);if(e!==null)switch(typeof e){case"string":this.parseAn(e);break;case"object":this.parsePosition(e);break;case"number":this.parseIndex(e);break;default:console.error("Position type not supported",e,typeof e);break}}get neighbours(){return this.index===null?{north:null,south:null,east:null,west:null,northEast:null,northWest:null,southEast:null,southWest:null}:{north:new c(this.index-8),south:new c(this.index+8),east:new c(this.index+1),west:new c(this.index-1),northEast:new c(this.index-7),northWest:new c(this.index-9),southEast:new c(this.index+9),southWest:new c(this.index+7)}}get index(){if(this._index===null)throw new Error("Position index is null");return this._index}set index(e){this.parseIndex(e),this._index=e}get an(){return this._an}set an(e){this.parseAn(e),this._an=e}get rank(){if(this._rank===null)throw new Error("Position rank is null");return this._rank}set rank(e){this.parseRank(e),this._rank=e}parseRank(e){return e===null&&this.setNull(),this._index=c.rankFileToIndex(e,this.file),this._an=c.indexToAn(this.index),this}get file(){if(this._file===null)throw new Error("Position file is null");return this._file}set file(e){this.parsefile(e),this._file=e}parsefile(e){return e===null&&this.setNull(),this._index=c.rankFileToIndex(this.rank,e),this._an=c.indexToAn(this.index),this}parsePosition(e){return this._index=e.index,this._rank=e.rank,this._file=e.file,this._an=e.an,this}parseAn(e){return e===c._nullAn?(this.setNull(),this):(this._index=c.anToIndex(e),this._index===null||this._index<0||this._index>63?(this.setNull(),this):(this._an=e,this._rank=c.getRankOfIndex(this.index),this._file=c.getRankOfIndex(this.index),this))}setNull(){throw this._index=c._nullIndex,this._an=c._nullAn,this._rank=c._nullRank,this._file=c._nullFile,new Error("Set a Position to null")}parseIndex(e){return e===null?(this.setNull(),this):c.isValidIndex(e)?(this._index=e,this._an=c.indexToAn(e),this._rank=c.getRankOfIndex(e),this._file=c.getFileOfIndex(e),this):(this.setNull(),this)}isEqual(e){return this.index===e.index}copy(){return new c(this)}static fileDifference(e,t){return e.file===null||t.file===null?1/0:Math.abs(e.file-t.file)}static indexToAn(e){if(e===null)return"-";const t="abcdefgh",i=e%8,s=8-Math.floor(e/8);return t[i]+s}static anToIndex(e){const i="abcdefgh".indexOf(e[0]),s=8-Number(e[1]);return i===-1||s===-1?null:s+i*8}static rankFileToIndex(e,t){return t===null||e===null?null:e+(7-t)*8}static getRankOfIndex(e){return e===null?null:7-Math.floor(e/8)}static getFileOfIndex(e){return e===null?null:e%8}static isValidIndex(e){return e===null?!1:e>=0&&e<=63}};n(c,"_nullIndex",null),n(c,"_nullAn","-"),n(c,"_nullRank",null),n(c,"_nullFile",null),n(c,"Null",new c(null));let a=c;class H{static validateScope(e,t){return t.skipValidate?!0:!(!t.nullValidate||!this.positionValidate(t)||!this.cantHaveMovedValidate(t)||!this.freePositionsValidation(e,t)||!this.isACaptureValidation(e,t)||!this.isAPromotionValidation(t)||!this.castleValidate(e,t))}static validate(e,t){return this.validateScope(e,t)&&this.willPutPlayerInCheckValidation(e,t)}static castleValidate(e,t){const i=e.state.castle;return t.isCastleMove?i.includes(t.castleChange):!0}static willPutPlayerInCheckValidation(e,t){const i={colour:t.piece.colour.opposite};t.do(!1);const r=!e.getScope(i).some(l=>l.endPiece.isKing&&!l.endPiece.colour.isEqual(l.piece.colour));return t.undo(),r}static isAPromotionValidation(e){if(e.piece.isPawn){const t=e.piece;return e.isPromotion&&e.end.rank===t.promotionRank||!e.isPromotion&&e.end.rank!==t.promotionRank}return!0}static positionValidate(e){return!(e.hasToStartAtRank&&e.start.rank!==e.hasToStartAtRank||a.fileDifference(e.start,e.end)>e.piece.maxFileDifference)}static cantHaveMovedValidate(e){return!(e.piece.hasMoved&&e.pieceCantHaveMoved)}static isACaptureValidation(e,t){if(t.endPiece.colour.isEqual(t.piece.colour))return!1;if(!t.mustBeCapture||t.isCapture)return!0;if(e.state.enPassant!==null&&t.canBeEnpassant&&t.piece.isPawn&&(t.isEnpassantTake=e.state.enPassant.isEqual(t.end),t.isEnpassantTake)){if(e.state.enPassant.neighbours.north===null||e.state.enPassant.neighbours.south==null)return!1;t.willDestroy.push(e.state.enPassant.neighbours.north,e.state.enPassant.neighbours.south)}return t.isEnpassantTake}static freePositionsValidation(e,t){return t.mustBeFree.every(i=>e.getPieceAtPosition(i).isEmpty)}}class y{static getMoves(e,t){var i;try{const s=(i=this.moveCache[e])==null?void 0:i[t];return{result:s!==void 0,moves:s!==void 0?s:[]}}catch(s){return console.log(s),{result:!1,moves:[]}}}static cacheMoves(e,t,i){this.moveCache={...this.moveCache,[e]:{[t]:i}}}static clearCache(){console.log("Clearing cache"),this.moveCache={}}static cacheScope(e,t,i){this.scopeCache={...this.scopeCache,[e]:{[t]:i}}}static getScope(e,t){var i;try{const s=(i=this.scopeCache[e])==null?void 0:i[t];return{result:s!==void 0,moves:s!==void 0?s:[]}}catch(s){return console.log(s),{result:!1,moves:[]}}}}n(y,"moveCache",{}),n(y,"scopeCache",{});class M{constructor(e,t,i){n(this,"start");n(this,"end");n(this,"piece");n(this,"willCreateEnPassant",!1);n(this,"willDestroy",[]);n(this,"isAttack",!0);n(this,"isEnpassantTake",!1);n(this,"isCastleMove",!1);n(this,"enPassantPositionCreated",null);n(this,"canBeEnpassant",!1);n(this,"mustBeFree",[]);n(this,"mustBeCapture",!1);n(this,"canBeCapture",!0);n(this,"hasToStartAtRank",null);n(this,"skipValidate",!1);n(this,"changePlayerAfterMove",!0);n(this,"extraMoves",[]);n(this,"value",0);n(this,"endPiece");n(this,"pieceCantHaveMoved",!1);n(this,"destoryedPieces",[]);n(this,"stateBefore");n(this,"castleChange","");n(this,"game");n(this,"isPromotion",!1);n(this,"promotionPiece",u.EMPTY.id);n(this,"stateId");this.start=new a(e.position),this.end=new a(t),this.piece=e,this.game=i,this.endPiece=i.getPieceAtPosition(this.end),this.stateBefore=i.state.copy(!0),this.stateId=i.state.id}get stateAfter(){return this.constructStateAfter()}get isCheck(){return this.endPiece.isKing&&E.areDifferentColourAndNotNull(this.piece.colour,this.endPiece.colour)}get simpleEvaluation(){return this.endPiece.type.value+this.piece.positionalValue(this.end)-this.piece.positionalValue(this.start)}get isCapture(){return E.areDifferentColourAndNotNull(this.piece.colour,this.endPiece.colour)}get nullValidate(){return!!this.endPiece}destroyPositions(){this.willDestroy.forEach(e=>{this.destoryedPieces.push(this.game.board[e.index]),this.game.destroyPieceAtPosition(e)})}undoDestroyPositions(){for(const e of this.destoryedPieces)this.game.placePieceAtPosition(e,e.position);this.destoryedPieces=[]}constructStateAfter(){const e=this.stateBefore.copy();return this.castleChange!==""&&this.castleChange.split("").forEach(t=>{e.castle=e.castle.replace(t,"")}),this.enPassantPositionCreated!==null?e.enPassant=this.enPassantPositionCreated:e.enPassant=null,this.isCapture&&(e.halfMoveClock=0),e.halfMoveClock++,this.piece.colour.isBlack&&e.fullMoveClock++,e}doExtraMoves(e=!0){this.extraMoves.forEach(t=>{t.do(e)})}undoExtraMoves(){this.extraMoves.forEach(e=>{e.undo()})}handlePromotion(){if(this.isPromotion){const e=this.end.index;this.game.destroyPieceAtIndex(e);const t=this.piece.colour,i=V.generate(e,this.promotionPiece,t);this.game.placePieceAtPosition(i,this.end)}}undoPromotion(){this.isPromotion&&(this.game.destroyPieceAtPosition(this.start),this.game.placePieceAtPosition(this.piece,this.start))}validate(e){return H.validate(e,this)}validateScope(e){return H.validateScope(e,this)}do(e=!0){this.game.destroyPieceAtPosition(this.start),this.game.placePieceAtPosition(this.piece,this.end),this.game.state=this.stateAfter,this.destroyPositions(),this.handlePromotion(),this.doExtraMoves(e),e&&(this.game.moveHistory.push(this),y.clearCache())}undo(){this.game.placePieceAtPosition(this.piece,this.start),this.game.placePieceAtPosition(this.endPiece,this.end),this.game.state=this.stateBefore,this.undoDestroyPositions(),this.undoPromotion(),this.undoExtraMoves()}get algebraicNotation(){const e=this.piece.type.id,t=this.end.an,i=this.start.an,s=this.isCapture?"x":"",r=this.isPromotion?`=${this.promotionPiece}`:"",l=this.isCastleMove?"O-O":"";return`${e}${i}${s}${t}${r}${l}`}}class A{constructor(e,t){n(this,"type");n(this,"colour");n(this,"selected");n(this,"hasMoved",!1);n(this,"maxFileDifference",0);n(this,"_position");n(this,"_moves",[]);n(this,"_scope",[]);n(this,"id");this._position=new a(e),this.colour=t,this.selected=!1,this.type=u.NULL,this.id=S()}get valueGrid(){return new Array(64).fill(0)}set position(e){this._position=new a(e)}get position(){return this._position}positionalValue(e){return e.index===null?0:this.valueGrid[e.index]/10}get directions(){return this.colour.isBlack?{forward:(e=1)=>{const t=this.position.index+e*8;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backward:(e=1)=>{const t=this.position.index-e*8;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},left:(e=1)=>{const t=this.position.index+e;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},right:(e=1)=>{const t=this.position.index-e;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},forwardLeft:(e=1)=>{const t=this.position.index+e*9;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},forwardRight:(e=1)=>{const t=this.position.index+e*7;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backwardLeft:(e=1)=>{const t=this.position.index-e*7;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backwardRight:(e=1)=>{const t=this.position.index-e*9;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)}}:{forward:(e=1)=>{const t=this.position.index-e*8;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backward:(e=1)=>{const t=this.position.index+e*8;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},left:(e=1)=>{const t=this.position.index-e;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},right:(e=1)=>{const t=this.position.index+e;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},forwardLeft:(e=1)=>{const t=this.position.index-e*9;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},forwardRight:(e=1)=>{const t=this.position.index-e*7;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backwardLeft:(e=1)=>{const t=this.position.index+e*7;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)},backwardRight:(e=1)=>{const t=this.position.index+e*9;return this.position.index===null||!a.isValidIndex(t)?null:new a(t)}}}get moves(){return this._moves}get scope(){return this._scope}get isBlack(){return this.colour.isBlack}get isWhite(){return this.colour.isWhite}get isEmpty(){return this.type.id===u.EMPTY.id}get isKing(){return this.type.id===u.KING.id}get isPawn(){return this.type.id===u.PAWN.id}get isBishop(){return this.type.id===u.BISHOP.id}get isKnight(){return this.type.id===u.KNIGHT.id}get isRook(){return this.type.id===u.ROOK.id}get isQueen(){return this.type.id===u.QUEEN.id}generateMoves(e){const t=y.getMoves(this.id,e.state.id);if(t.result)return t.moves;const i=this._generateMoves(e).filter(s=>s.validate(e));return y.cacheMoves(this.id,e.state.id,i),i}_generateMoves(e){return console.log(this.type.name,e.state.id),[]}generateScope(e){const t=y.getScope(this.id,e.state.id);if(t.result)return t.moves;const i=this._generateMoves(e).filter(s=>s.validateScope(e));return y.cacheScope(this.id,e.state.id,i),i}select(){this.selected=!0}deselect(){this.selected=!1}directionMoveGenerator(e,t,i){for(let s=1;s<=8;s++){const r=t(s);if(!r)continue;const l=new M(this,r,i);for(let h=1;h<=s-1;h++)t(h)&&l.mustBeFree.push(new a(t(h)));const d=l.mustBeFree.length?l.mustBeFree[l.mustBeFree.length-1]:this.position;if(a.fileDifference(r,d)>1)return;e.push(l)}}appendMove(e,t,i){if(i!==null){const s=new M(this,i,e);t.push(s)}}}class Q extends A{constructor(t,i){super(t,i);n(this,"BISHOP_VALUE_GRID_WHITE",[0,0,0,0,0,0,0,1,1,2,0,0,0,0,2,1,2,3,3,3,3,3,3,2,2,3,4,4,4,4,3,2,3,5,6,5,5,6,5,3,5,6,6,4,4,6,6,5,6,6,4,4,4,4,6,6,0,0,0,0,0,0,0,0]);n(this,"BISHOP_VALUE_GRID_BLACK",this.BISHOP_VALUE_GRID_WHITE.slice().reverse());this.maxFileDifference=8,this.type=u.BISHOP}get valueGrid(){return this.colour.isWhite?this.BISHOP_VALUE_GRID_WHITE:this.BISHOP_VALUE_GRID_BLACK}_generateMoves(t){const i=[];return this.directionMoveGenerator(i,this.directions.forwardLeft,t),this.directionMoveGenerator(i,this.directions.forwardRight,t),this.directionMoveGenerator(i,this.directions.backwardLeft,t),this.directionMoveGenerator(i,this.directions.backwardRight,t),i}}class m extends A{constructor(e){super(e,E.Null),this.type=u.EMPTY}}class q extends A{constructor(t,i){super(t,i);n(this,"KING_VALUE_GRID",[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,2,2,2,2,1,0,0,1,2,4,4,2,1,0,0,1,2,4,4,2,1,0,0,1,2,2,2,2,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0]);this.maxFileDifference=5,this.type=u.KING}get valueGrid(){return this.KING_VALUE_GRID}castleMoves(t){let i,s,r,l,d,h,g,k,f;this.isBlack?(i=2,s=3,r=0,k=[1,2,3],f="q",l=6,d=5,h=7,g=[5,6],f="k"):(i=58,s=59,r=56,k=[57,58,59],f="Q",l=62,d=61,h=63,g=[61,62],f="K");const p=new M(this,i,t);p.isCastleMove=!0,p.isAttack=!1;const D=new M(t.getPieceAtPosition(new a(r)),s,t);D.changePlayerAfterMove=!1,p.extraMoves.push(D);const _=new M(this,l,t);_.isCastleMove=!0,_.isAttack=!1;const U=new M(t.getPieceAtPosition(new a(h)),d,t);return U.changePlayerAfterMove=!1,_.extraMoves.push(U),_.castleChange=f,p.castleChange=f,p.mustBeFree=k.map(B=>new a(B)),_.mustBeFree=g.map(B=>new a(B)),[p,_]}_generateMoves(t){let i=[];return this.appendMove(t,i,this.directions.forward(1)),this.appendMove(t,i,this.directions.forward(1)),this.appendMove(t,i,this.directions.backward(1)),this.appendMove(t,i,this.directions.left(1)),this.appendMove(t,i,this.directions.right(1)),this.appendMove(t,i,this.directions.backwardLeft(1)),this.appendMove(t,i,this.directions.backwardRight(1)),this.appendMove(t,i,this.directions.forwardLeft(1)),this.appendMove(t,i,this.directions.forwardRight(1)),i.forEach(s=>{s.castleChange="kqKQ"}),i=i.concat(this.castleMoves(t)),i}}class $ extends A{constructor(t,i){super(t,i);n(this,"type",u.KNIGHT);n(this,"maxFileDifference",2);n(this,"KNIGHT_VALUE_GRID_WHITE",[0,1,1,1,1,1,1,0,1,2,2,2,2,2,2,1,1,5,7,6,6,7,0,1,2,4,8,7,7,8,0,2,1,3,6,5,5,6,3,1,1,2,4,3,3,4,2,1,1,1,1,3,3,1,1,1,0,0,0,0,0,0,0,0]);n(this,"KNIGHT_VALUE_GRID_BLACK",this.KNIGHT_VALUE_GRID_WHITE.slice().reverse())}get valueGrid(){return this.colour.isWhite?this.KNIGHT_VALUE_GRID_WHITE:this.KNIGHT_VALUE_GRID_BLACK}get knightEndPositionShift(){return[10,-10,17,-17,15,-15,6,-6]}_generateMoves(t){const i=[];return this.knightEndPositionShift.forEach(s=>{const r=this.position.index+s;if(this.position.index===null||!a.isValidIndex(r))return;const l=new M(this,r,t);i.push(l)}),i}}class Y extends A{constructor(t,i){super(t,i);n(this,"maxFileDifference",1);n(this,"PAWN_VALUE_GRID_WHITE",[0,0,0,0,0,0,0,0,1,1,1,2,2,1,1,1,2,1,2,3,3,2,1,2,3,2,3,4,4,3,2,3,4,3,4,5,5,4,3,4,5,4,5,6,6,5,4,5,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]);n(this,"PAWN_VALUE_GRID_BLACK",this.PAWN_VALUE_GRID_WHITE.slice().reverse());this.type=u.PAWN}get valueGrid(){return this.colour.isWhite?this.PAWN_VALUE_GRID_WHITE:this.PAWN_VALUE_GRID_BLACK}get promotionRank(){return this.isWhite?7:0}get startingRank(){return this.isWhite?1:6}get isAtStart(){return this.position.rank===this.startingRank}_generateMoves(t){let i=[];return i=this.generateMoveOneAheadMove(t,i),i=this.generateTwoAheadMove(t,i),i=this.generateAttackMoves(t,i),i}generatePromotionMoves(t,i,s){const r=s(1);if(!r)return[];const l=new M(this,r,t);l.isPromotion=!0,l.promotionPiece=u.QUEEN.id;const d=new M(this,r,t);d.isPromotion=!0,d.promotionPiece=u.KNIGHT.id;const h=new M(this,r,t);h.isPromotion=!0,h.promotionPiece=u.BISHOP.id;const g=new M(this,r,t);return g.isPromotion=!0,g.promotionPiece=u.ROOK.id,i.push(l),i.push(d),i.push(h),i.push(g),i}generateMoveOneAheadMove(t,i){const s=this.directions.forward(1);if(s===null)return i;const r=new M(this,s,t);return r.mustBeFree.push(s),r.canBeCapture=!1,r.isAttack=!1,i.push(r),i=this.generatePromotionMoves(t,i,this.directions.forward),i}generateAttackMoves(t,i){let s=[];return s=this.generatePromotionMoves(t,s,this.directions.forwardLeft),s=this.generatePromotionMoves(t,s,this.directions.forwardRight),this.appendMove(t,s,this.directions.forwardLeft(1)),this.appendMove(t,s,this.directions.forwardRight(1)),s=s.map(r=>(r.mustBeCapture=!0,r.canBeEnpassant=!0,r)),i=i.concat(s),i}generateTwoAheadMove(t,i){const s=this.directions.forward(1),r=this.directions.forward(2);if(!s||!r)return i;const l=new M(this,r,t);return l.hasToStartAtRank=this.startingRank,l.mustBeFree.push(s),l.mustBeFree.push(r),l.canBeCapture=!1,l.willCreateEnPassant=!0,l.isAttack=!1,l.enPassantPositionCreated=new a(this.directions.forward(1)),i.push(l),i}}class j extends A{constructor(t,i){super(t,i);n(this,"type",u.QUEEN);n(this,"QUEEN_VALUE_GRID_WHITE",[1,1,1,3,3,1,1,1,1,2,2,4,4,2,2,1,1,2,3,5,5,3,2,1,3,4,5,7,7,5,4,3,3,4,5,7,7,5,4,3,1,2,3,5,5,3,2,1,1,2,2,4,4,2,2,1,1,1,1,3,3,1,1,1]);n(this,"QUEEN_VALUE_GRID_BLACK",this.QUEEN_VALUE_GRID_WHITE.slice().reverse());this.maxFileDifference=8}get valueGrid(){return this.colour.isWhite?this.QUEEN_VALUE_GRID_WHITE:this.QUEEN_VALUE_GRID_BLACK}_generateMoves(t){const i=[];return this.directionMoveGenerator(i,this.directions.forwardLeft,t),this.directionMoveGenerator(i,this.directions.forwardRight,t),this.directionMoveGenerator(i,this.directions.backwardLeft,t),this.directionMoveGenerator(i,this.directions.backwardRight,t),this.directionMoveGenerator(i,this.directions.forward,t),this.directionMoveGenerator(i,this.directions.backward,t),this.directionMoveGenerator(i,this.directions.left,t),this.directionMoveGenerator(i,this.directions.right,t),i}}class z extends A{constructor(t,i){super(t,i);n(this,"type",u.ROOK);n(this,"ROOK_VALUE_GRID_WHITE",[5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,5,5,6,7,7,7,7,6,5,5,6,7,8,8,7,6,5,5,6,7,8,8,7,6,5,5,6,7,7,7,7,6,5,5,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5]);n(this,"ROOK_VALUE_GRID_BLACK",this.ROOK_VALUE_GRID_WHITE.slice().reverse());this.maxFileDifference=7}get valueGrid(){return this.colour.isWhite?this.ROOK_VALUE_GRID_WHITE:this.ROOK_VALUE_GRID_BLACK}_generateMoves(t){const i=[];return this.directionMoveGenerator(i,this.directions.forward,t),this.directionMoveGenerator(i,this.directions.backward,t),this.directionMoveGenerator(i,this.directions.left,t),this.directionMoveGenerator(i,this.directions.right,t),i}}class V{static generate(e,t,i){let s;switch(t){case u.KING.id:s=new q(e,i);break;case u.QUEEN.id:s=new j(e,i);break;case u.ROOK.id:s=new z(e,i);break;case u.BISHOP.id:s=new Q(e,i);break;case u.KNIGHT.id:s=new $(e,i);break;case u.PAWN.id:s=new Y(e,i);break;default:s=new m(e);break}return s}}class x{constructor(e="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"){n(this,"initialString");n(this,"board");n(this,"playerTurn");n(this,"castle");n(this,"enPassant");n(this,"halfMoveClock");n(this,"fullMoveClock");const t=e.split(" ");this.initialString=e,this.board=t[0],this.playerTurn=t[1],this.castle=t[2],this.enPassant=t[3],this.halfMoveClock=t[4],this.fullMoveClock=t[5]}static ParseFEN(e){const t=new x(e),i={};i.board=x.parseBoard(t);const s=x.parseCastleStateFEN(t),r=x.parseEnPassantFEN(t),l=x.parsePlayerTurnFEN(t),d=parseInt(t.halfMoveClock),h=parseInt(t.fullMoveClock);return i.state=new R(s,r,l,d,h),i}static parseBoard(e){const t=[],i=e.board.split("");let s=0;return i.forEach(r=>{if(r==="/")return;if(K(r)){const d=parseFloat(r);for(let h=0;h<d;h++)t[s]=V.generate(s,u.EMPTY.id,E.Null),s++;return}const l=I(r)?E.White:E.Black;t[s]=V.generate(s,r.toLocaleUpperCase(),l),s++}),t}static parsePlayerTurnFEN(e){return new E(e.playerTurn.toLocaleUpperCase())}static parseCastleStateFEN(e){return e.castle}static parseEnPassantFEN(e){return e.enPassant==="-"?null:new a(e.enPassant)}static generateFEN(e){const t=new x;return t.board=x.generateBoardFEN(e),t.playerTurn=x.generatePlayerTurnFEN(e),t.castle=x.generateCastleStateFEN(e),t.enPassant=x.generateEnPassantFEN(e),t.halfMoveClock=x.generateHalfMoveClockFEN(e),t.fullMoveClock=x.generateTurnNumberFEN(e),`${t.board} ${t.playerTurn} ${t.castle} ${t.enPassant} ${t.halfMoveClock} ${t.fullMoveClock}`}static generateBoardFEN(e){let t="",i=0;for(let s=0;s<64;s++){const r=e.board[s];r.type.id===u.EMPTY.id?i++:(i>0&&(t+=i,i=0),t+=r.isWhite?r.type.id:r.type.id.toLowerCase()),s%8===7&&(i>0&&(t+=i,i=0),s!==63&&(t+="/"))}return t}static generatePlayerTurnFEN(e){return e.playerTurn.colour.id}static generateCastleStateFEN(e){return e.state.castle}static generateEnPassantFEN(e){return e.state.enPassant?e.state.enPassant.an:"-"}static generateHalfMoveClockFEN(e){return e.state.halfMoveClock.toString()}static generateTurnNumberFEN(e){return e.state.fullMoveClock.toString()}}class J{constructor(e="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",t,i){n(this,"FEN");n(this,"board",[]);n(this,"moveHistory");n(this,"currentEvaluation");n(this,"selectedPiece",null);n(this,"whitePlayer");n(this,"blackPlayer");n(this,"_playerTurn");n(this,"state");this.whitePlayer=t,this.blackPlayer=i;const s=x.ParseFEN(e);this.board=s.board,this.state=s.state,this.FEN=s.FEN,this._playerTurn=s.state.colour.isWhite?this.whitePlayer:this.blackPlayer,this.currentEvaluation=0,this.moveHistory=[]}get playerTurn(){return this._playerTurn}set playerTurn(e){e.colour.isWhite?this._playerTurn=this.whitePlayer:this._playerTurn=this.blackPlayer}get isWhitesMove(){return this.playerTurn.colour.isWhite}get isBlacksMove(){return this.playerTurn.colour.isBlack}selectPiece(e){return this.selectedPiece&&this.selectedPiece.deselect(),this.selectedPiece=this.getPieceAtIndex(e),this.selectedPiece&&this.selectedPiece.select(),this.selectedPiece}deselectPiece(){this.selectedPiece&&(this.selectedPiece.deselect(),this.selectedPiece=null)}getPieceAtIndex(e){return this.board[e]}getPieceAtPosition(e){try{return this.board[e.index]}catch(t){throw console.log(e,t),new Error("Invalid position")}}placePieceAtIndex(e,t){e.position=t,this.board[t]=e}placePieceAtPosition(e,t){t.index!==null&&this.placePieceAtIndex(e,t.index)}destroyPieceAtIndex(e){return this.board[e]=new m(e)}destroyPieceAtPosition(e){return e.index===null?null:this.destroyPieceAtIndex(e.index)}changePlayer(){this.state.colour=this.playerTurn.colour,this.playerTurn=this.playerTurn.colour.isWhite?this.blackPlayer:this.whitePlayer}addMoveHistory(e){this.moveHistory.push(e)}removeMoveFromHistory(e){const t=this.moveHistory.indexOf(e);t>-1&&this.moveHistory.splice(t,1)}getMoves(e){let t=[];return this.board.forEach(i=>{if(!e){t=t.concat(i.generateMoves(this));return}e.colour&&!e.colour.isEqual(i.colour)||(t=t.concat(i.generateMoves(this)))},this),t}getScope(e){let t=[];return this.board.forEach(i=>{if(!e){t=t.concat(i.generateScope(this));return}e.colour&&!e.colour.isEqual(i.colour)||(t=t.concat(i.generateScope(this)))},this),t}_destroyPositions(e){e.forEach(t=>{t.index!==null&&(this.board[t.index]=new m(t.index))})}_handleEnPassant(e){if(e.willCreateEnPassant){this.state.enPassant=e.enPassantPositionCreated;return}this.state.enPassant=null}}class L{constructor(e,t){n(this,"_isHuman");n(this,"_colour");n(this,"_isPlayerTurn",!1);this._isHuman=t,this._colour=new E(e)}get isHuman(){return this._isHuman}set isHuman(e){this._isHuman=e}get isCpu(){return!this._isHuman}set isCpu(e){this._isHuman=!e}get colour(){return this._colour}}class b{static simple(e){let t=0;for(const i of e.board){if(i.isEmpty)continue;const s=i.generateMoves(e);t=b.positionalValue(i,t),t=b.spaceValue(i,s,t)}return t=this.mateValue(e,t),t}static spaceValue(e,t,i){return e.isWhite?t.forEach(s=>{s.end.index<=32&&(i+=1)}):t.forEach(s=>{s.end.index>=32&&(i-=1)}),i}static positionalValue(e,t){return e.isBlack?(t-=e.type.value,t-=e.positionalValue(e.position)):(t+=e.type.value,t+=e.positionalValue(e.position)),t}static mateValue(e,t){const i=e.getMoves({colour:e.blackPlayer.colour}),s=e.getMoves({colour:e.whitePlayer.colour});return i.length===0?s.some(r=>r.isCheck)?(t=1/0,t):(t=0,t):s.length===0?i.some(r=>r.isCheck)?(t=-1/0,t):(t=0,t):t}}const C=class C{static search(e){return C.searchForPlayer(e,e.playerTurn,C.depth)}static searchForPlayer(e,t,i=3){console.log("Starting best move calculation for",t.colour.name);let s=-1/0,r=1/0,l=0;const d=t.colour.isWhite;let h=d?-1/0:1/0;const g=e.getMoves({colour:t.colour}).sort((f,p)=>p.simpleEvaluation-f.simpleEvaluation);console.log("Checking",g.length,"moves at depth",i);let k;for(const f of g){console.time("move"),console.log(f.algebraicNotation,"with value",f.simpleEvaluation),f.do(!1);const p=C.innerSearch(e,i-1,s,r,!d,l);if(f.value=p.value,(d&&p.value>h||!d&&p.value<h)&&(h=p.value,k=f),f.undo(),d&&h>=r||!d&&h<=s)break;s=d?Math.max(s,h):s,r=d?r:Math.min(r,h),l=p.numberOfPositions,console.log(s,r),console.log(g.length-g.indexOf(f),"moves left","positions checked:",l),console.timeEnd("move"),console.log("-------------------------")}return k===void 0?null:(console.log("Number of positions checked",l),console.log("Best move:",k.piece.colour.name,k.piece.type.name,k.start.index,k.end.index,"with value:",k.value),k)}static innerSearch(e,t,i,s,r,l){if(t===0)return{value:b.simple(e),alpha:i,beta:s,numberOfPositions:l+1};const d=r;let h=d?-1/0:1/0;const g={colour:d?E.White:E.Black},k=e.getMoves(g).sort((f,p)=>p.simpleEvaluation-f.simpleEvaluation);for(const f of k){f.do(!1);const p=C.innerSearch(e,t-1,i,s,!d,l);if(f.value=p.value,d?(h=Math.max(h,p.value),i=Math.max(i,h)):(h=Math.min(h,p.value),s=Math.min(s,h)),l=p.numberOfPositions,f.undo(),d&&h>=s||!d&&h<=i)break}return{value:h,alpha:i,beta:s,numberOfPositions:l}}};n(C,"depth",2);let T=C;self.onmessage=o=>{if(!o.data)return;const e=new J(o.data,new L("W",!1),new L("B",!1)),t=T.search(e);postMessage(t)}})();
